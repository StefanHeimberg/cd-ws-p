Continous Delivery - Hands on
=============================
:author:    Oliver Nautsch
:backend:   slidy
:imagesdir: images

Ziel
----

* eine Deployment Pipeline bauen

Einführung - Begriffe
---------------------

=== Continous Delivery ===
bezeichnet eine Sammlung von Techniken, Prozessen und Werkzeugen, die den Softwarelieferprozess verbessern. (Wikipedia)

=== Deployment Pipeline ===
ist eine Menge von Validierungen, die eine Software auf ihrem Weg zur Veröffentlichung bestehen muss. (Wikipedia)

Einführung - Softwareentwicklungsansätze
----------------------------------------

=== Die Manifeste

[width="100%",cols="^4,^1,^4,^1,^4", options="header"]
|===============================================================================================
|Software Craftsmanship      |    |Agile                       |    |Traditionell
|a community of professionals|over|individuals and interactions|over|processes and tools
|well-crafted software       |over|working software            |over|comprehensive documentation
|productive partnerships     |over|customer collaboration      |over|contract negotiation
|steadily adding value       |over|responding to change        |over|following a plan
|===============================================================================================

=== Principles and Practices / Prinzipien und Praktiken

- Prinzipien: sind dem Anderen übergeordnet
- Praktiken: Handlungen die bei der Umsetzung der Prinzipien helfen

Aufgabenstellung
----------------

* ein Bug Tracking Tool
* iterativ entwickeln
* weil wir es alle kennen, oder kennen sollten :)

Git Essentials - Local
----------------------

* +git init+
* +git add <files>+
* +git commit+
* +git reset \-- <files>+
* +git checkout \-- <files>+
* +git status+
* +git log+
* +man git-init+
* Git Buch: http://git-scm.com/book/de
* Visuelle Git Referenz: http://marklodato.github.io/visual-git-guide/index-de.html
* Git CheatSheet: http://ndpsoftware.com/git-cheatsheet.html

Git Essentials - Local - Hands on
---------------------------------

- lege ein Verzeichnis +~/projects/git-ho+ an (+mkdir+, +cd+)
- erzeuge eine Datei +README.asciidoc+ in diesem Verzeichnis und füge den Text "Version 1" und einen Zeilenumbruch ein (+vi+)
- erzeuge ein git repository/git history (+git init+)
- lese output von +git status+
- fuege die Datei zum 'index' hinzu (+git add+)
- +git status+ sagt auch hier was man tuen könnte
- commit in die 'history' fuer diese Datei (+git commit+, erfragt wird +git config+)
- ändere den Inhalt der Datei in dem Du eine Zeile "Version 2" hinzufügst (+vi+)
- mache die Änderung mit der letzten Version in 'history' rückgängig (+git checkout+)
- nochmals die Datei editieren und "Version 3" Zeile hinzufügen
- Datei den 'index' hinzufügen (+git add+)
- 'index' wieder zurücksetzen mit letzter Version in 'history' (+git reset+)
- zum Abschluss noch die History mit allen Änderungen anschauen (+git log+)

Git Essentials - Remote
-----------------------

- +git clone+


Git Essentials - Remote - hands-on
----------------------------------

- erzeuge ein Verzeichnis +~/gitrepos+
- clone +\~/projects/git-ho+ nach +~/gitrepos/git-ho.git+ (+git clone \--bare+)


issumy - Iteration 1
--------------------

- UC-1: Eine Liste von Issues sehen
- Ohne jede Infrastruktur eine Klasse bauen die eine Liste von Issues liefert
- Einfachste Version ist eine Liste von Strings

issumy - Iteration 1 - Projekt Setup - hands-on install gvm
-----------------------------------------------------------

- installiere GVM the Groovy enVironment Manager http://gvmtool.net/ .

----
~/$curl -s get.gvmtool.net | bash
~/$source "/home/dev/.gvm/bin/gvm-init.sh"
~/$gvm
----

- installiere Gradle http://www.gradle.org/

----
~/$gvm install gradle 2.0
----

- installiere Lazybones Project Creation Tool https://github.com/pledbrook/lazybones

----
~/$gvm install lazybones
----

- erzeuge Projekt mit Schablone aus lazybones

----
~/$projects$lazybones create java-basic issumy
~/$projects$cd issumy
~/$projects/issumy$>gradle tasks
----

issumy - Iteration 1 - Projekt Setup - hands-on import in IDEA
--------------------------------------------------------------

.Importiere das Projekt in Intellij IDEA
image::iteration1-import-project.png[Import Projekt in IDEA]


Zusammenfassung
---------------

* eine Deployment Pipeline gebaut
