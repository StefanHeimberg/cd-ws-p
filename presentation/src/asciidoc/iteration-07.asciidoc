:imagesdir: images

== Iteration 7 - Veröffentlichen des Images via gradle

* erzeuge eine Docker-Datei
* integriere dieses Docker Taggen
* und Docker Pushen in gradle build von issumy

== Iteration 7 - Veröffentlichen des Images via gradle - Arbeitsschritte

* es muss ein _Dockerfile_ mit einem Task _createDockerfile_ erzeugt werden:
[source, txt]
----
FROM ollin/vertx")
MAINTAINER Oliver Nautsch <oliver.nautsch@gmail.com>")

VOLUME /home/issumy
ADD $modZip.archiveName /home/issumy/$modZip.archiveName
EXPOSE 8080

WORKDIR /home/issumy
CMD ["runzip", "$modZip.archiveName"]
----

    *** dieses Dockerfile zusammen mit der mod-zip Datei ins Verzeichnis +build/docker+ stellen (_prepareModZipForDocker_)
    *** dann Docker-Image erstellen

[source, java]
----
task createDockerImage (type: Exec) {
    workingDir 'build/docker'
    commandLine 'docker', 'build', '-t', "inventage/issumy:$version", '.'
}
createDockerImage.dependsOn createDockerfile, prepareModZipForDocker
----

   *** docker tag mit +localhost:5000/inventage/issumy:latest+ und +localhost:5000/inventage/issumy:$version+
   *** docker push mit +localhost:5000/inventage/issumy:latest+ und +localhost:5000/inventage/issumy:$version+
   *** _uploadArchives_ abhängig machen von den push tasks

== Iteration 7 - Veröffentlichen des Images via gradle - Lösung

[source, java]
----

task prepareModZipForDocker (type: Copy) {
    from modZip
    into 'build/docker'
}

task createDockerfile << {
    def dockerFile = 'build/docker/Dockerfile'

    def oldDockerFile = new File(dockerFile)

    if (oldDockerFile.exists()) {
        oldDockerFile.delete();
    }

    def newDockerFile = new File(dockerFile)
    newDockerFile.createNewFile();

    newDockerFile.withWriter { out ->
        out.writeLine("FROM ollin/vertx")
        out.writeLine("MAINTAINER Oliver Nautsch <oliver.nautsch@gmail.com>")
        out.writeLine("")
        out.writeLine("VOLUME /home/issumy")
        out.writeLine("ADD $modZip.archiveName /home/issumy/$modZip.archiveName")
        out.writeLine("EXPOSE 8080")
        out.writeLine("")
        out.writeLine("WORKDIR /home/issumy")
        out.writeLine("CMD [\"runzip\", \"$modZip.archiveName\"]")
    }
}
createDockerfile.dependsOn prepareModZipForDocker

task createDockerImage (type: Exec) {
    workingDir 'build/docker'
    commandLine 'sudo', 'docker', 'build', '-t', "inventage/issumy:$version", '.'
}
createDockerImage.dependsOn createDockerfile, prepareModZipForDocker
build.dependsOn createDockerImage

task tagDockerImageLatest (type: Exec) {
    commandLine 'sudo', 'docker', 'tag', "inventage/issumy:$version", "localhost:5000/inventage/issumy:latest"
}
tagDockerImageLatest.dependsOn createDockerImage

task pushDockerImageLatest (type: Exec) {
    commandLine 'sudo', 'docker', 'push', "localhost:5000/inventage/issumy:latest"
}
pushDockerImageLatest.dependsOn tagDockerImageLatest


task tagDockerImageVersion (type: Exec) {
    commandLine 'sudo', 'docker', 'tag', "inventage/issumy:$version", "localhost:5000/inventage/issumy:$version"
}
tagDockerImageVersion.dependsOn createDockerImage

task pushDockerImageVersion (type: Exec) {
    commandLine 'sudo', 'docker', 'push', "localhost:5000/inventage/issumy:$version"
}
pushDockerImageVersion.dependsOn tagDockerImageVersion
uploadArchives.dependsOn pushDockerImageVersion, pushDockerImageLatest
----
