:imagesdir: images

== Git Essentials - Local

image::git-logo.png["Git Logo",float="right", link="http://git-scm.com/"]

* +git init+
* +git add <files>+
* +git commit+
* +git reset \-- <files>+
* +git checkout \-- <files>+
* +git status+
* +git log+
Manual::
* +man git-init+
Links::
* Git Buch: http://git-scm.com/book/de
* Visuelle Git Referenz: http://marklodato.github.io/visual-git-guide/index-de.html
* Git CheatSheet: http://ndpsoftware.com/git-cheatsheet.html

== Git Essentials - Local - Hands on

image::overview-git.png["Overview - Git", float="right", width=301, link="./images/overview-git.png"]

[source, bash]
----
cd
mkdir -p projects/hello-git                 # <1>
cd projects/hello-git
touch README.asciidoc                       # <2>
echo "Version 1" >> README.asciidoc         # <3>
git init                                    # <4>
git status                                  # <5>
git add .                                   # <6>
git status                                  # <7>
git commit -m "initial commit"              # <8>
git config --global user.email "dev@devexampleserver.com"
git config --global user.name "dev devi"    # <9>

echo "Version 2" >> README.asciidoc         # <10>
cat README.asciidoc                         # <11>
git checkout README.asciidoc                # <12>
cat README.asciidoc                         # <13>
----
<1> lege ein Verzeichnis +~/projects/hello-git+ an
<2> erzeuge eine Datei +README.asciidoc+ in diesem Verzeichnis und
<3> füge den Text "Version 1" und einen Zeilenumbruch ein
<4> erzeuge ein git repository/git history
<5> zeigt Status von deiner working copy im Vergleich mit History
<6> fügt alle geänderten Dateien zum 'index'
<7> zeigt Varianten was man tun könnte
<8> commit in die 'history'
<9> globale Einstellungen machen für Git
<10> ändere Inhalt der Datei
<11> zeigt zwei Zeilen an
<12> macht die Änderung mit der letzten Version in 'history' rückgängig
<13> zeigt zwei Zeilen an

== Git Essentials - Branching


- +git branch+
  ** erzeugen, auflisten, löschen von Branches
- +git checkout <branch-name>+
  ** wechselt in den branch
  ** setzt _HEAD_ auf den branch
- +git merge+
  ** zusammenführen von Histories
- +git rebase+
  ** erzeugt lineare History in dem Änderungen eines Branches auf einem anderen Branch angewendet werden

Ausflug ins Git-Buch::
- http://git-scm.com/book/de/Git-Branching-Was-ist-ein-Branch%3F[Git Branching - Was ist ein Branch?]

== Git Essentials - Remote


- +git clone+
  ** erzeugt einen Clone eines Repositories in einem neuen Verzeichnis
- +git fetch+
  ** download von Objekten und refs
- +git pull+
  ** fetch und integration in ein anderes Repo oder lokalen Branch
- +git push+
  ** updated remote refs mit lokalen refs indem die notwendigen Objekte geschickt werden


== Git Essentials - Remote - hands-on

[source, bash]
----
cd
cd projects/
git clone --bare hello-git/ /home/dev/git-repos/hello-git.git       # <1>
cd hello-git/
git remote add upstream file:///home/dev/git-repos/hello-git.git    # <2>
git remote -v                                                       # <3>

cd && cd projects/ && mkdir hello-git-dev2 && cd hello-git-dev2     # <4>
git clone file:///home/dev/git-repos/hello-git.git/ .               # <5>
echo "Hallo von Entickler 2" >> README.asciidoc
git commit -a -m "Hallo von dev2"                                   # <6>
git push                                                            # <7>
git config --global push.default simple                             # <8>

cd && cd projects/hello-git                                         # <9>
git fetch upstream                                                  # <10>
git merge upstream/master                                           # <11>
cat README.asciidoc
----

<1> macht ein +git init+ und ein +git fetch+ ohne eine Arbeitskopie anzulegen
<2> fügt das "Remote-Repository" deinem lokalen Repository unter dem Namen _upstream_ hinzu
<3> zeigt alle Remote-Repositiories an
<4> in die Rolle eines zweiten Entwicklers wechseln
<5> erzeugt ein lokales Repository für den zweiten Entwickler
<6> fügt alle Änderungen zum index hinzu und commited diese Änderungen in die History
<7> Änderung wird ins remote Repository kopiert
<8> konfiguriert konservatives push-Verhalten
<9> in die Rolle des 1. Entwicklers wechseln
<10> holen der Änderungen von _upstream_ in die lokale History
<11> einfügen der Änderungen in die lokale Arbeitskopie
